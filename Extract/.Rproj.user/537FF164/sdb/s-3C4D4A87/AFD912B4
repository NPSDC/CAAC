{
    "contents" : "#####Functions###########\nfind.missing <- function(comp1, comp2)\n{\n  ##Inputs- 2 Gene id sets\n  #Outputs - The Gene Ids which are present in comp1 but not comp2\n  return (as.character(comp1[which(is.na(match(comp1, comp2) == T))]))\n}\n\nset.level <- function(cell.level, cell.conc, type)\n{\n  ##Input - Cell whose level has to be set; cell.conc is the types conc\n  #Output - sets it to high or low\n  if(type == 1)\n  {  \n    cell.level = sapply(cell.level, function(x)\n    {\n      #Sets the Cell$Level to only high or low\n      if(x == cell.conc[3] | x == cell.conc[1])\n        x = cell.conc[1]\n      else\n        x = cell.conc[2]\n      #return x;\n    }\n    )  \n  }\n  else\n  {\n    cell.level = sapply(cell.level, function(x)\n    {\n      #Sets the Cell$Level to only Present or Not detected\n      if(x == cell.conc[4] )\n        x = cell.conc[4]\n      else\n        x = \"Present\"\n     \n    })\n  }\n  \n}\n\ncalculate.level <- function(threshold, count.high, count.low, vals)\n{\n  #Sets the level of a gene based on no of threshold\n  total <- count.high + count.low\n  highest <- max(count.high, count.low)\n  if(highest/total >= threshold)\n  {\n    if(highest == count.high)\n      return(vals[1])\n    else\n      return(vals[2])\n  }   \n  else\n    return(NA)\n}\n\nfind.mismatch <- function(type.Level,type.Gene, prop.level, no.of.unique.genes) \n{\n  #Finds Genes differentially expressed w.r.t proportion\n  ans = c() \n  for (id in 1:no.of.unique.genes)\n  {\n    \n    if(!is.na(prop.level[id]))\n    {\n      if(type.Level[id] != prop.level[id])\n      {\n        if(type.Gene[id] == 'ENSG00000001630')\n          print(c(prop.level[id]))\n        ans = c(ans, as.character(type.Gene[id]))\n      }\n    }\n    \n  }\n  return(ans)\n}\n\nget.mismatch <- function(type.Level, type.Gene, list.cols, l)\n{\n  ans = sapply(list.cols, function(x)\n  {\n    find.mismatch(type.Level, type.Gene , x, l)\n  })\n  names(ans) <- c(\"50\", \"75\", \"90\", \"100\")\n  return(ans)\n}\n###Normal Script\nsetwd(\"~/Dropbox/honours/Extract/\")\ncanc = read.csv('../cancer.csv') #The original cancer data\nnormal = read.csv('../normal_tissue.csv') # The normal tissue data\nunique_genes = unique(canc$Gene) #The unique genes in cancer\nmapping = read.delim('map-swiss.tab', header = TRUE, sep = \"\\t\") #Protein mappings from their ids\ncancer.liver = canc[canc$Tumor == 'liver cancer',] #Contains only liver cancer data\nnormal.liver = normal[normal$Tissue == 'liver', ] #Contains only liver cells\nhepatocytes = normal.liver[which(normal.liver$Cell.type == \"hepatocytes\"),] #Contains only hepatocytes\nbile.duct = normal.liver[which(normal.liver$Cell.type == \"bile duct cells\"),] #Contains only bile duct cells\nconc.hep = levels(hepatocytes$Level) # Various modes of conc such as high;low,med;not det\nconc.bile = levels(bile.duct$Level)\nhepatocytes$Level = set.level(hepatocytes$Level, conc.hep, 1)\nbile.duct$Level = set.level(bile.duct$Level, conc.bile)\n\n\nl = length(unique(cancer.liver$Gene)) #Length of unique genes\nmod.canc.liver = data.frame(Gene = rep(unique(cancer.liver$Gene),2),  #Contains the modified levels of liver cancer\n                            Level = factor(rep(c(\"High\", \"Low\"), l)), #and their levels w.r.t proportions\n                            count = rep(0L, 2*l), total = rep(0L, 2*l))\n                            \ni = 0\nconc.cancer = levels(cancer.liver$Level)\nunique.cancer.genes = as.character(unique(cancer.liver$Gene))\nhigh.indexes = cancer.liver$Level == conc.cancer[1] \nmed.indexes = cancer.liver$Level == conc.cancer[3]  #Medium\nlow.indexes = cancer.liver$Level == conc.cancer[2]  \nnot.det.indexes = cancer.liver$Level == conc.cancer[4] #Not Detected\n\nfor (x in unique.cancer.genes) #Sets the modified cancer liver with thresholds and counts\n  {\n    genes.indexes = cancer.liver$Gene == x\n    mod.canc.liver$Gene[c(2*i +1 , 2*i + 2)] <- x\n    mod.canc.liver$Level[c(2*i +1 , 2*i + 2)] <- c(\"High\", \"Low\")\n    mod.canc.liver$count[c(2*i +1 , 2*i + 2)] <- c(cancer.liver$Count.patients[which(genes.indexes & high.indexes)]\n                                            + cancer.liver$Count.patients[which(genes.indexes & med.indexes)],\n                                            cancer.liver$Count.patients[which(genes.indexes & low.indexes)] +\n                                              cancer.liver$Count.patients[which(genes.indexes & not.det.indexes)] )\n    mod.canc.liver$total[c(2*i +1 , 2*i + 2)] <- mod.canc.liver$count[2*i + 1] + mod.canc.liver$count[2*i + 2]\n    levels = sapply(c(0.5, 0.75, 0.9, 1), function(x)\n    {\n      calculate.level(x, mod.canc.liver$count[c(2*i + 1)], mod.canc.liver$count[c(2*i + 2)], c('High', 'Low'))\n    })\n    mod.canc.liver$actual.level.50[c(2*i +1 , 2*i + 2)] <- levels[1]\n    mod.canc.liver$actual.level.75[c(2*i +1 , 2*i + 2)] <- levels[2]\n    mod.canc.liver$actual.level.90[c(2*i +1 , 2*i + 2)] <- levels[3]\n    mod.canc.liver$actual.level.100[c(2*i +1 , 2*i + 2)] <- levels[4]\n    i = i + 1\n}\n\n#Missing genes in hepatocyte, bile.duct\nhep.missing <- find.missing(unique.cancer.genes, hepatocytes$Gene)\nbile.duct.missing <- find.missing(unique.cancer.genes, bile.duct$Gene)\n\n#Genes common in hepatocyte and liver cancer\nhep.present <- as.character(unique.cancer.genes[match(hepatocytes$Gene, unique.cancer.genes)])\nbile.present <- as.character(unique.cancer.genes[match(bile.duct$Gene, unique.cancer.genes)])\nindexes.hep <- match(hep.present, mod.canc.liver$Gene)\nindexes.bile <- match(bile.present, mod.canc.liver$Gene)\nl.hep = length(hepatocytes$Gene) #Total number of genes in hepatocytes\nl.bile = length(bile.duct$Gene)\nhepatocytes$Canc.Level.50 = mod.canc.liver$actual.level.50[indexes.hep] #Copying data(of proportions) \nhepatocytes$Canc.Level.75 = mod.canc.liver$actual.level.75[indexes.hep] #from mod.canc.liver to hepatocytes\nhepatocytes$Canc.Level.90 =  mod.canc.liver$actual.level.90[indexes.hep]\nhepatocytes$Canc.Level.100 = mod.canc.liver$actual.level.100[indexes.hep]\nbile.duct$Canc.Level.50 = mod.canc.liver$actual.level.50[indexes.bile] #Copying data(of proportions) \nbile.duct$Canc.Level.75 = mod.canc.liver$actual.level.75[indexes.bile] #from mod.canc.liver to hepatocytes\nbile.duct$Canc.Level.90 =  mod.canc.liver$actual.level.90[indexes.bile]\nbile.duct$Canc.Level.100 = mod.canc.liver$actual.level.100[indexes.bile]\n\nans.hep = get.mismatch(hepatocytes$Level, hepatocytes$Gene, list(hepatocytes$Canc.Level.50, \n                        hepatocytes$Canc.Level.75, hepatocytes$Canc.Level.90, hepatocytes$Canc.Level.100), l.hep)\nans.bile = get.mismatch(bile.duct$Level, bile.duct$Gene,list(bile.duct$Canc.Level.50, bile.duct$Canc.Level.75, bile.duct$Canc.Level.90, \n                             bile.duct$Canc.Level.100), l.bile)\n\n\n\nwrite(ans.hep$`100`, 'Expression100.txt')\nwrite.csv(hepatocytes[match(ans.hep$`100`, hepatocytes$Gene), ], 'hep100.csv')\nwrite.csv(bile.duct[match(ans.bile$`100`, bile.duct$Gene), ], 'bile100.csv')\nwrite.csv(cancer.liver, \"LiverCancer.csv\")\nwrite.csv(normal.liver, \"LiverNormal.csv\")\nwrite.csv(mod.canc.liver, \"LiverCancerUpdated.csv\")\nwrite.csv(hepatocytes, \"LiverNormalWithCancerLevel.csv\")\n",
    "created" : 1445606534502.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2661685819",
    "id" : "AFD912B4",
    "lastKnownWriteTime" : 1446879446,
    "path" : "~/Dropbox/honours/Extract/extract.R",
    "project_path" : "extract.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}