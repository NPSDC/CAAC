down.reg
length(temp$Probe.ID)
length(filtered$Probe.ID)
1075/1793
intersect(down.reg, diff.expressed.down.all.canc.corr$Renal.Cancer)
intersect(down.reg, map.genes.ids(diff.expressed.down.all.canc.corr$Renal.Cancer, genes.ids))
length(intersect(down.reg, map.genes.ids(diff.expressed.down.all.canc.corr$Renal.Cancer, genes.ids)))
duplicated(temp$Gene.Symbol)[100]
which(duplicated(temp$Gene.Symbol))
duplicated.ids <- which(duplicated(temp$Gene.Symbol))
length(duplicated.ids)
duplicated.ids[12]
duplicated.ids[11]
filter.genes <- function(df, basis.col, gene.col)
{
rem.index = c()
df[,gene.col] = as.character(df[,gene.col])
for(i in seq(length(100)))
{
if(length(df[,gene.col][i]) == 0)
{
rem.index = c(rem.index, i)
next
}
indexes = which(df[,gene.col][i] == df[,gene.col])
print(indexes)
if(df[,basis.col])
# print(indexes)
max.index = indexes[which.max(abs(df[,basis.col][indexes]))]
#print(req.index)
req.index = setdiff(indexes, max.index)
rem.index = c(rem.index, setdiff(req.index, rem.index))
}
#return(temp[-rem.index,])
}
filter.genes(temp, 2, 9)
filter.genes <- function(df, basis.col, gene.col)
{
rem.index = c()
df[,gene.col] = as.character(df[,gene.col])
for(i in seq(length(100)))
{
if(length(df[,gene.col][i]) == 0)
{
rem.index = c(rem.index, i)
next
}
indexes = which(df[,gene.col][i] == df[,gene.col])
print(indexes)
#if(df[,basis.col])
# print(indexes)
max.index = indexes[which.max(abs(df[,basis.col][indexes]))]
#print(req.index)
req.index = setdiff(indexes, max.index)
rem.index = c(rem.index, setdiff(req.index, rem.index))
}
#return(temp[-rem.index,])
}
filter.genes(temp, 2, 9)
temp$Gene.Symbol[1185]
temp$Gene.Symbol[11]
temp$Gene.Symbol[1]
filter.genes <- function(df, basis.col, gene.col)
{
rem.index = c()
df[,gene.col] = as.character(df[,gene.col])
for(i in seq(100))
{
if(length(df[,gene.col][i]) == 0)
{
rem.index = c(rem.index, i)
next
}
indexes = which(df[,gene.col][i] == df[,gene.col])
print(indexes)
#if(df[,basis.col])
# print(indexes)
max.index = indexes[which.max(abs(df[,basis.col][indexes]))]
#print(req.index)
req.index = setdiff(indexes, max.index)
rem.index = c(rem.index, setdiff(req.index, rem.index))
}
#return(temp[-rem.index,])
}
temp$Gene.Symbol[1]
filter.genes(temp, 2, 9)
filter.genes <- function(df, basis.col, gene.col)
{
rem.index = c()
indexes.viewd = c()
df[,gene.col] = as.character(df[,gene.col])
for(i in seq(100))
{
if(length(df[,gene.col][i]) == 0)
{
rem.index = c(rem.index, i)
next
}
if(i %in% indexes.viewd)
next
indexes = which(df[,gene.col][i] == df[,gene.col])
indexes.viewd = c(indexes.viewd, indexes)
if(sum(df[,gene.col] >= 0) != length(indexes) && sum(df[,gene.col] <= 0) != length(indexes))
next
print(indexes)
#if(df[,basis.col])
# print(indexes)
max.index = indexes[which.max(abs(df[,basis.col][indexes]))]
#print(req.index)
req.index = setdiff(indexes, max.index)
rem.index = c(rem.index, setdiff(req.index, rem.index))
}
#return(temp[-rem.index,])
}
filter.genes(temp, 2, 9)
filter.genes <- function(df, basis.col, gene.col)
{
rem.index = c()
indexes.viewd = c()
df[,gene.col] = as.character(df[,gene.col])
for(i in seq(100))
{
if(length(df[,gene.col][i]) == 0)
{
rem.index = c(rem.index, i)
next
}
if(i %in% indexes.viewd)
next
indexes = which(df[,gene.col][i] == df[,gene.col])
indexes.viewd = c(indexes.viewd, indexes)
#if(sum(df[,gene.col] >= 0) != length(indexes) && sum(df[,gene.col] <= 0) != length(indexes))
#next
print(indexes)
#if(df[,basis.col])
# print(indexes)
max.index = indexes[which.max(abs(df[,basis.col][indexes]))]
#print(req.index)
req.index = setdiff(indexes, max.index)
rem.index = c(rem.index, setdiff(req.index, rem.index))
}
#return(temp[-rem.index,])
}
filter.genes(temp, 2, 9)
filter.genes <- function(df, basis.col, gene.col)
{
rem.index = c()
indexes.viewd = c()
df[,gene.col] = as.character(df[,gene.col])
for(i in seq(100))
{
if(length(df[,gene.col][i]) == 0)
{
rem.index = c(rem.index, i)
next
}
if(i %in% indexes.viewd)
next
indexes = which(df[,gene.col][i] == df[,gene.col])
indexes.viewd = c(indexes.viewd, indexes)
if(sum(df[,basis.col] >= 0) != length(indexes) && sum(df[,basis.col] <= 0) != length(indexes))
next
print(indexes)
#if(df[,basis.col])
# print(indexes)
max.index = indexes[which.max(abs(df[,basis.col][indexes]))]
#print(req.index)
req.index = setdiff(indexes, max.index)
rem.index = c(rem.index, setdiff(req.index, rem.index))
}
#return(temp[-rem.index,])
}
filter.genes(temp, 2, 9)
filter.genes(temp, 2, 9)
filter.genes <- function(df, basis.col, gene.col)
{
rem.index = c()
indexes.viewd = c()
df[,gene.col] = as.character(df[,gene.col])
for(i in seq(100))
{
if(length(df[,gene.col][i]) == 0)
{
rem.index = c(rem.index, i)
next
}
if(i %in% indexes.viewd)
next
indexes = which(df[,gene.col][i] == df[,gene.col])
indexes.viewd = c(indexes.viewd, indexes)
if(sum(df[,basis.col][indexes] >= 0) != length(indexes) && sum(df[,basis.col][indexes] <= 0) != length(indexes))
next
print(indexes)
#if(df[,basis.col])
# print(indexes)
max.index = indexes[which.max(abs(df[,basis.col][indexes]))]
#print(req.index)
req.index = setdiff(indexes, max.index)
rem.index = c(rem.index, setdiff(req.index, rem.index))
}
#return(temp[-rem.index,])
}
filter.genes(temp, 2, 9)
filter.genes <- function(df, basis.col, gene.col)
{
rem.index = c()
indexes.viewd = c()
df[,gene.col] = as.character(df[,gene.col])
for(i in seq(100))
{
if(length(df[,gene.col][i]) == 0)
{
rem.index = c(rem.index, i)
next
}
if(i %in% indexes.viewd)
next
indexes = which(df[,gene.col][i] == df[,gene.col])
indexes.viewd = c(indexes.viewd, indexes)
if(sum(df[,basis.col][indexes] >= 0) != length(indexes) && sum(df[,basis.col][indexes] <= 0) != length(indexes))
next
#print(indexes)
#if(df[,basis.col])
# print(indexes)
max.index = indexes[which.max(abs(df[,basis.col][indexes]))]
print(max.index)
#print(req.index)
req.index = setdiff(indexes, max.index)
rem.index = c(rem.index, setdiff(req.index, rem.index))
}
#return(temp[-rem.index,])
}
filter.genes(temp, 2, 9)
filter.genes <- function(df, basis.col, gene.col)
{
rem.index = c()
indexes.viewd = c()
df[,gene.col] = as.character(df[,gene.col])
for(i in seq(100))
{
if(length(df[,gene.col][i]) == 0)
{
rem.index = c(rem.index, i)
next
}
if(i %in% indexes.viewd)
next
indexes = which(df[,gene.col][i] == df[,gene.col])
indexes.viewd = c(indexes.viewd, indexes)
if(sum(df[,basis.col][indexes] >= 0) != length(indexes) && sum(df[,basis.col][indexes] <= 0) != length(indexes))
next
#print(indexes)
#if(df[,basis.col])
# print(indexes)
max.index = indexes[which.max(abs(df[,basis.col][indexes]))]
#print(max.index)
#print(req.index)
req.index = setdiff(indexes, max.index)
rem.index = c(rem.index, setdiff(req.index, rem.index))
}
rem.index = sort(rem.index)
return(temp[-rem.index,])
}
filtered <- filter.genes(temp,2,9)
duplicated.ids
which(filtered$Gene.Symbol == 'CTSB')
filtered[1540,]
length(filtered$Probe.ID)
length(unique(filtered$Probe.ID))
length(unique(filtered$Gene.Symbol))
length(filtered$Gene.Symbol)
filtered <- filter.genes(temp,2,9)
setwd('microarray/')
source('function.R')
filtered <- filter.genes(temp,2,9)
source('function.R')
filtered <- filter.genes(temp,2,9)
print(length(temp$Gene.Symbol))
length(filtered$Gene.Symbol)
length(unique(filtered$Gene.Symbol))
View(filtered)
length(unique(filtered$Gene.Symbol))
source('function.R')
filtered <- filter.genes(temp,2,9)
source('function.R')
filtered <- filter.genes(temp,2,9)
length(temp[,9][2215])
temp[,9][2215]
temp[,9][2222]
as.character(temp[,9])[2222]
source('function.R')
filtered <- filter.genes(temp,2,9)
length(temp$Gene.Title)
length(filtered$Gene.Title)
length(unique(filtered$Gene.Title))
length(unique(temp$Gene.Title))
source('function.R')
filtered <- filter.genes(temp,2,9)
source('function.R')
filtered <- filter.genes(temp,2,9)
down.reg <- filter(filtered, logFC < 0) %>% select(Gene.Symbol) %>% unlist %>% as.character
up.reg <- filter(filtered, logFC > 0) %>% select(Gene.Symbol) %>% unlist %>% as.character
length(intersect(down.reg, map.genes.ids(diff.expressed.down.all.canc.corr$Renal.Cancer, genes.ids)))
length(intersect(up.reg, map.genes.ids(diff.expressed.up.all.canc.corr$Renal.Cancer, genes.ids)))
length(up.ref)
length(up.reg)
length(down.reg)
length(intersect(filtered$Gene.Symbol, map.genes.ids(diff.expressed.all.canc.corr$Renal.Cancer, genes.ids)))
length(intersect(diff.expressed.all.canc.corr$Renal.Cancer))
length(diff.expressed.all.canc.corr$Renal.Cancer)
length(diff.expressed.up.all.canc.corr$Renal.Cancer) + length(diff.expressed.down.all.canc.corr$Renal.Cancer)
length(down.reg) + length(up.reg)
sum(is.na(match(union(down.reg, up.reg), filtered$Gene.Symbol)))
setdiff(filtered$Gene.Symbol, down.reg)
intersect(up.reg, map.genes.ids(diff.expressed.all.canc.corr$Renal.Cancer, genes.ids))
intersect(up.reg, map.genes.ids(diff.expressed.up.all.canc.corr$Renal.Cancer, genes.ids))
intersect(up.reg, map.genes.ids(diff.expressed.down.all.canc.corr$Renal.Cancer, genes.ids))
intersect(down.reg, map.genes.ids(diff.expressed.down.all.canc.corr$Renal.Cancer, genes.ids))
intersect(down.reg, map.genes.ids(diff.expressed.up.all.canc.corr$Renal.Cancer, genes.ids))
micr.prot.ints = list()
micr.prot.ints[['up']][['up']] = intersect(up.reg, map.genes.ids(diff.expressed.up.all.canc.corr$Renal.Cancer, genes.ids))
micr.prot.ints[['up']][['down']] = intersect(up.reg, map.genes.ids(diff.expressed.down.all.canc.corr$Renal.Cancer, genes.ids))
micr.prot.ints[['down']][['up']] = intersect(down.reg, map.genes.ids(diff.expressed.up.all.canc.corr$Renal.Cancer, genes.ids))
micr.prot.ints[['down']][['down']] = intersect(down.reg, map.genes.ids(diff.expressed.down.all.canc.corr$Renal.Cancer, genes.ids))
names(micr.prot.ints) = c('up', 'down')
names(micr.prot.ints$down) = c('up', 'down')
names(micr.prot.ints$up) = c('up', 'down')
micr.prot.ints$up$up
micr.prot.ints$up$down
temp <- filter(req.dfs, P.Value < 0.05, abs(logFC) > 0.58 )
temp <- filter(req.dfs, adj.P.Val < 0.05, abs(logFC) > 0.58)
filtered <- filter.genes(temp,2,9)
down.reg <- filter(filtered, logFC < 0) %>% select(Gene.Symbol) %>% unlist %>% as.character
up.reg <- filter(filtered, logFC > 0) %>% select(Gene.Symbol) %>% unlist %>% as.character
length(down.reg)
length(up.reg)
length(filtered$Gene.Symbol)
length(unique(filtered$Gene.Symbol))
temp <- filter(req.dfs, P.Value < 0.05, abs(logFC) > 0.6 )
temp <- filter(req.dfs, adj.P.Val < 0.05, abs(logFC) > 0.6)
setwd('~/Dropbox/honours/Extract/microarray/renal/')
filtered <- filter.genes(temp,2,9)
duplicated.ids <- which(duplicated(temp$Gene.Symbol))
micr.prot.int <- intersect(filtered$Gene.Symbol, map.genes.ids(diff.expressed.all.canc.corr$Renal.Cancer, genes.ids))
mean(filtered$logFC < 0)
down.reg <- filter(filtered, logFC < 0) %>% select(Gene.Symbol) %>% unlist %>% as.character
up.reg <- filter(filtered, logFC > 0) %>% select(Gene.Symbol) %>% unlist %>% as.character
length(filtered$Gene.Symbol)
length(micr.prot.ints$up$up)
length(micr.prot.ints$up$down)
length(micr.prot.ints$down$down)
length(micr.prot.ints$down$up)
View(normal)
renal.prot.sup <- filter(normal, Tissue == 'kidney', Reliability == 'Supportive')
View(canc)
renal.prot.canc <- filter(canc, Tumor == 'renal cancer')
View(renal.prot.canc)
View(renal.prot.sup)
View(renal.prot.sup)
remove(renal.prot.sup)
renal.prot.norm <- filter(normal, Tissue == 'kidney')##Normal protein data with supportive reliablity
gene.ids
length(gene.ids)
View(map.genes.ids())
View(map.genes.ids
)
View(genes.ids)
View(renal.prot.norm)
View(renal.prot.norm)
View(genes.ids)
source('function.R')
getwd()
setwd('..')
source('function.R')
?rep
renal.prot.norm$Gene.Sym = rep(c('NA'), length(renal.prot.norm$Gene))
source('function.R')
renal.prot.norm$Gene.Sym = add.gene.name(renal.prot.norm, 1, 7, genes.ids)
source('function.R')
renal.prot.norm$Gene.Sym = add.gene.name(renal.prot.norm, 1, 7, genes.ids)
source('function.R')
renal.prot.norm$Gene.Sym = add.gene.name(renal.prot.norm, 1, 7, genes.ids)
length(unique(renal.prot.norm$Gene))
length(renal.prot.norm$Gene)
which(duplicated(renal.prot.norm$Gene) == F)
which(duplicated(renal.prot.norm$Gene == F))
which(duplicated(renal.prot.norm$Gene == T))
genes.na
genes.indexes
sapply(unique(renal.prot.norm$Gene), function(x))
sapply(unique(renal.prot.norm$Gene), function(x){
length(which(x == renal.prot.norm$Gene)) == 1
})
sapply(unique(renal.prot.norm$Gene)[c(1,10)], function(x){
length(which(x == renal.prot.norm$Gene)) == 1
})
sapply(unique(renal.prot.norm$Gene)[c(1,10)], function(x){
which(length(which(x == renal.prot.norm$Gene)) == 1)
})
sapply(unique(renal.prot.norm$Gene)[c(1:10)], function(x){
which(length(which(x == renal.prot.norm$Gene)) == 1)
})
a= sapply(unique(renal.prot.norm$Gene), function(x){
which(length(which(x == renal.prot.norm$Gene)) == 1)
})
sapply(unique(renal.prot.norm$Gene)[c(1,10)], function(x){
which(length(which(x == renal.prot.norm$Gene)) == 2)
})
a= sapply(unique(renal.prot.norm$Gene), function(x){
length(which(x == renal.prot.norm$Gene)) == 1
})
a
which(a==T)
b = which(a==T)
b
c = match(unique(renal.prot.norm$Gene)[b], renal.prot.norm$Gene)
c
renal.prot.canc$Gene.Sym = rep(c('NA'), length(renal.prot.canc$Gene))
renal.prot.canc$Gene.Sym = add.gene.name(renal.prot.canc, 1, 8, genes.ids)
source('function.R')
renal.prot.int = find.sub.int(renal.prot.norm, 1, micr.prot.int)
View(renal.prot.int)
renal.prot.int = find.sub.int(renal.prot.norm, 7, micr.prot.int)
source('function.R')
renal.prot.int = find.sub.int(renal.prot.norm, 7, micr.prot.int)
source('function.R')
renal.prot.int = find.sub.int(renal.prot.norm, 7, micr.prot.int)
filter(renal.prot.int, Reliability == 'Supportive') %>% unique(Gene.Sym)
filter(renal.prot.int, Reliability == 'Supportive') %>%  select(Gene.Sym) %% unlist %% unique %% length
filter(renal.prot.int, Reliability == 'Supportive') %>%  select(Gene.Sym) %>% unlist  %>% unique %>% length
filter(renal.prot.int, Reliability == 'Uncertain') %>%  select(Gene.Sym) %>% unlist  %>% unique %>% length
filter(renal.prot.int, Reliability == 'Supportive') %>%  select(Gene.Sym) %>% unlist  %>% unique %>% length
micr.prot.ints$down$up
unreliable <- filter(renal.prot.int, Reliability == 'Uncertain') %>%  select(Gene.Sym) %>% unlist  %>% unique %>% length
reliable <- filter(renal.prot.int, Reliability == 'Supportive') %>%  select(Gene.Sym) %>% unlist  %>% unique
intersect(micr.prot.ints$down$up,unreliable)
intersect(micr.prot.ints$down$up,reliable)
reliable
unreliable
unreliable <- filter(renal.prot.int, Reliability == 'Uncertain') %>%  select(Gene.Sym) %>% unlist  %>% unique
intersect(micr.prot.ints$down$up,unreliable)
intersect(micr.prot.ints$down$down,unreliable)
intersect(micr.prot.ints$down$down,reliable)
length(intersect(micr.prot.ints$down$down,reliable))
length(intersect(micr.prot.ints$up$down,reliable))
length(intersect(micr.prot.ints$up$up,reliable))
renal.prot.canc.int = find.sub.int(renal.prot.canc, 8, micr.prot.int)
View(renal.prot.canc.int)
length(renal.prot.canc.int$Gene)
length(renal.prot.canc.int$Gene)/4
View(cancer.all.gene.wise.corr)
micr.prot.ints$up$up
getwd()
setwd('renal')
write(up.reg, 'up_reg.txt')
write(down.reg, 'down_reg.txt')
setwd('intersection/')
unlist(micr.prot.ints$up)
length(unlist(micr.prot.ints$up))
write(unlist(micr.prot.ints$up), 'up.txt')
write(unlist(micr.prot.ints$down), 'down.txt')
View(hcc_data)
lev
levels(hcc_data$Patient.2177)
genes
genes = as.character(hcc_data$GENES[which( hcc_data$Patient.2177 == lev[3] | hcc_data$Patient.2177 == lev[1] |
hcc_data$Patient.2177 == lev[4])]) #contains genes present(high,med,low) in patient 1
lev = levels(hcc_data$Patient.2177)
genes = as.character(hcc_data$GENES[which( hcc_data$Patient.2177 == lev[3] | hcc_data$Patient.2177 == lev[1] |
hcc_data$Patient.2177 == lev[4])]) #contains genes present(high,med,low) in patient 1
length(genes)
View(gset)
View(as.matrix(gset))
as.matrix(gset)[,1]
boxplot(as.matrix(gset)[,1])
boxplot(as.matrix(eset)[,1])
boxplot(as.matrix(eset))
boxplot(as.matrix(gset))
boxplot(as.matrix(eset))
gsms <- "10100101001010101"
sml <- c()
for (i in 1:nchar(gsms)) { sml[i] <- substr(gsms,i,i) }
sml <- paste("G", sml, sep="")  #set group names
# order samples by group
ex <- exprs(gset)[ , order(sml)]
sml <- sml[order(sml)]
fl <- as.factor(sml)
labels <- c("cancer","normal")
palette(c("#dfeaf4","#f4dfdf", "#AABBCC"))
dev.new(width=4+dim(gset)[[2]]/5, height=6)
par(mar=c(2+round(max(nchar(sampleNames(gset)))/2),4,2,1))
title <- paste ("GSE781", '/', annotation(gset), " selected samples", sep ='')
boxplot(ex, boxwex=0.6, notch=T, main=title, outline=FALSE, las=2, col=fl)
legend("topleft", labels, fill=palette(), bty="n")
ex1 <- exprs(eset)[ , order(sml)]
palette(c("#dfeaf4","#f4dfdf", "#AABBCC"))
dev.new(width=4+dim(gset)[[2]]/5, height=6)
par(mar=c(2+round(max(nchar(sampleNames(gset)))/2),4,2,1))
title <- paste ("GSE781", '/', annotation(gset), " selected samples", sep ='')
boxplot(ex1, boxwex=0.6, notch=T, main=title, outline=FALSE, las=2, col=fl)
legend("topleft", labels, fill=palette(), bty="n")
palette(c("#dfeaf4","#f4dfdf", "#AABBCC"))
dev.new(width=4+dim(eset)[[2]]/5, height=6)
par(mar=c(2+round(max(nchar(sampleNames(eset)))/2),4,2,1))
title <- paste ("GSE781", '/', annotation(eset), " selected samples", sep ='')
boxplot(ex1, boxwex=0.6, notch=T, main=title, outline=FALSE, las=2, col=fl)
legend("topleft", labels, fill=palette(), bty="n")
source('~/Dropbox/honours/Extract/microarray/rccc.R')
View(req.dfs)
length(unique(req.dfs$Gene.Symbol))
length(unique(temp$Gene.Symbol))
save.image("~/Dropbox/honours/Extract/env.RData")
