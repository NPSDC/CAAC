write(diff.expressed.present$`100`, 'diff.expressed.present.100.txt')
####Comparing cancer patients
patient.list = list(hcc_data$Patient.2177, hcc_data$Patient.2280, hcc_data$Patient.2556, hcc_data$Patient.2766,
hcc_data$Patient.3196, hcc_data$Patient.3477)
patient.ids = colnames(hcc_data)[2:length(colnames(hcc_data))]
patient.similarites = list()
find.patient.similarity <- function()
{
ans = sapply(patient.list, function(x)
{
sapply(patient.list, function(y)
{
as.character(hcc_data$GENES[x == y])
})
})
return(ans)
}
ans = find.patient.similarity()
length(diff.expressed$`100`)
length(diff.expressed.present$`100`)
View(hcc_data)
View(hcc_data)
rep(1, 2)
featurise <- function(Patient.levels)
{
Vectorised.Levels = rep(-2, length(Patient.levels))
Vectorised.levels[Patient.levels == 'Weak'] = 0
Vectorised.levels[Patient.levels == 'Moderate'] = 0.5
Vectorised.levels[Patient.levels == 'Strong'] = 1
Vectorised.levels[Patient.levels == 'Negative'] = -1
}
patient.list
Levels = sapply(patient.list, featurise)
Patient.list[[1]]
patient.list[[1]]
patient.list[[2]]
patient.list[[6]]
patient.list[[6]][1]
patient.list[[1]][1]
patient.list[[2]][1]
patient.list[[3]][1]
patient.list[[4]][1]
patient.list[[6]][2]
patient.list[[6]] == 'Weak'
length(patient.list[[6]])
featurise <- function(Patient.levels)
{
Vectorised.Levels = rep(-2, length(Patient.levels))
Vectorised.levels[Patient.levels == 'Weak'] = 0
Vectorised.levels[Patient.levels == 'Moderate'] = 0.5
Vectorised.levels[Patient.levels == 'Strong'] = 1
Vectorised.levels[Patient.levels == 'Negative'] = -1
return(Vectorised.Levels)
}
Levels = sapply(patient.list, function(x)
{
featurise(x)
})
featurise <- function(Patient.levels)
{
Vectorised.levels = rep(-2, length(Patient.levels))
Vectorised.levels[Patient.levels == 'Weak'] = 0
Vectorised.levels[Patient.levels == 'Moderate'] = 0.5
Vectorised.levels[Patient.levels == 'Strong'] = 1
Vectorised.levels[Patient.levels == 'Negative'] = -1
return(Vectorised.Levels)
}
Levels = sapply(patient.list, function(x)
{
featurise(x)
})
featurise <- function(Patient.levels)
{
Vectorised.levels = rep(-2, length(Patient.levels))
Vectorised.levels[Patient.levels == 'Weak'] = 0
Vectorised.levels[Patient.levels == 'Moderate'] = 0.5
Vectorised.levels[Patient.levels == 'Strong'] = 1
Vectorised.levels[Patient.levels == 'Negative'] = -1
return(Vectorised.levels)
}
Levels = sapply(patient.list, function(x)
{
featurise(x)
})
Levels[1]
Levels[2]
Levels[5]
Levels = c()
Levels = c()
Levels = sapply(patient.list, function(x)
{
featurise(x)
})
names(Levels) <- patient.ids
Levels[1]
Levels[2]
Levels[1,2]
Levels[1,3]
Levels[2,3]
Levels[1,:]
Levels[1:]
Levels[1:,]
class(Levels)
Levels[1][2]
Levels[1,1]
Levels[2,1]
Levels[1:,1]
Levels[1:6]
Levels[1:6,2]
Levels[1:6,1:]
Levels[1:6,:]
Levels = sapply(patient.list, function(x)
{
featurise(x)
})
names(Levels) <- patient.ids
c(Levels)
a = c(Levels)
patient.ids
class(patient.ids)
Levels <- sapply(patient.list, function(x)
{
featurise(x)
})
names(Levels) <- patient.ids
Levels = c()
Levels <- sapply(patient.list, function(x)
{
featurise(x)
})
names(Levels) <- patient.ids
unlist(Levels)
View(Levels)
Levels[1:]
Levels[1:, ]
Levels[1, ]
Levels[,1 ]
Featurised.vec = hcc_data
View(Featurised.vec)
View(Featurised.vec)
Featurised.vec$Patient.2177 = Levels[,1]
Featurised.vec$Patient.2177 = Levels[,1]
Featurised.vec$Patient.2280 = Levels[,2]
Featurised.vec$Patient.2556 = Levels[,3]
Featurised.vec$Patient.2766 = Levels[,4]
Featurised.vec$Patient.3196 = Levels[,5]
Featurised.vec$Patient.3477 = Levels[,6]
?scale
scale(Featurised.vec)
scale(Levels)
a = scale(Featurised.vec)
a = scale(Levels)
a[1, ]
a[2, ]
a = scale(Levels, scale=F)
a[1, ]
mean(Levels[,1])
mean(Levels[,2])
scaled.data = scale(Levels)
?apply
?kmeans
x <- rbind(matrix(rnorm(100, sd = 0.3), ncol = 2),
matrix(rnorm(100, mean = 1, sd = 0.3), ncol = 2)
)
x
(cl <- kmeans(x, 2))
scaled = scale(t(Levels))
remove(scaled)
scaled.data = scale(t(Levels))
scale([1,])
scaled.data[1,]
scaled.data = scale(t(Levels), scale=F)
scaled.data[1,]
scaled.data[1,1]
fit <- kmeans(scaled.data)
fit <- kmeans(scaled.data, 2)
fit
fit$cluster
fit <- kmeans(scaled.data, 3)
fit$cluster
fit <- kmeans(scaled.data, 4)
fit$cluster
fit <- kmeans(scaled.data, 5)
fit$cluster
fit <- kmeans(scaled.data, 6)
fit <- kmeans(scaled.data, 5)
fit <- kmeans(Levels, 5)
fit$cluster
fit <- kmeans(t(Levels), 5)
fit$cluster
fit <- kmeans(scaled.data, 5)
fit$cluster
library(cluster)
clusplot(scaled.data, fit$cluster)
clusplot(scaled.data, fit$cluster, color = T, shade = T)
clusplot(scaled.data, fit$cluster, color = T, shade = T, labels = 2)
?prcomp
?princomp
?prcomp
?prcomp
prcomp(scale.data)
prcomp(scaled.data)
?kmeans
library(mclust)
?clusplot
clusplot(scaled.data, fit$cluster, color = T, shade = T)
clusplot(prcomp(scaled.data), fit$cluster, color = T, shade = T)
scaled.data
scaled.data
clusplot(prcomp(scaled.data), fit$cluster, color = T, shade = T)
clusplot(kmeans(scaled.data, 2))
class(scaled.data)
View(scaled.data)
View(scaled.data)
is.numeric(scaled.data)
is.numeric(fit$cluster)
?princomp
clusplot(prcomp(scaled.data), fit$cluster, color = T, shade = T)
plot(scaled.data)
d <- dist(scaled.data, method = "euclidean")
fit <- hclust(d, method = 'ward')
fit <- hclust(d, method = 'ward.D2')
plot(fit)
fit1 <- kmeans(scaled.data, 5)
fit1$cluster
fit1 <- kmeans(scaled.data, 4)
fit1$cluster
scaled.data = scale(Levels)
fits.kmeans = sapply(no.of.clusters, function(x)
{
kmeans(scaled.data, x)
}
)
no.of.clusters = c(2,3,4,5)
fits.kmeans = sapply(no.of.clusters, function(x)
{
kmeans(scaled.data, x)
}
)
scaled.data = scale(t(Levels))
no.of.clusters = c(2,3,4,5)
fits.kmeans = sapply(no.of.clusters, function(x)
{
kmeans(scaled.data, x)
}
)
fits.kmeans = sapply(list(no.of.clusters), function(x)
{
kmeans(scaled.data, x)
}
)
scaled.data = scale(t(Levels), scale=F)
fits.kmeans = sapply(list(no.of.clusters), function(x)
{
kmeans(scaled.data, x)
}
)
fit <- kmeans(scaled.data, 2)
fit <- kmeans(scaled.data, 5)
fit <- kmeans(scaled.data, 3)
fit <- kmeans(scaled.data, 4)
kmeans(scaled.data, x)
scaled.data = scale(t(Levels), scale=F)
no.of.clusters = c(2,3,4,5)
fits.kmeans = sapply(list(no.of.clusters), function(x)
{
kmeans(scaled.data, x)
}
)
fit <- kmeans(scaled.data, 4)
fits.kmeans = sapply(list(no.of.clusters), function(x)
{
print(x)
kmeans(scaled.data, x)
}
)
no.of.clusters[1]
fits.kmeans = sapply(no.of.clusters, function(x)
{
print(x)
kmeans(scaled.data, x)
}
)
fits.kmeans[1]$clusters
fit1$cluster
fits.kmeans[1]$cluster
fits.kmeans[2]$cluster
fits.kmeans
fits.kmeans$cluster
fits.kmeans = sapply(lapply(no.of.clusters), function(x)
{
print(x)
kmeans(scaled.data, x)
}
)
fits.kmeans = sapply(list(no.of.clusters), function(x)
{
print(x)
kmeans(scaled.data, x)
}
)
fit = kmeans(scaled.data, 2)
fit$cluster
fits.kmeans = sapply(no.of.clusters, function(x)
{
print(x)
kmeans(scaled.data, x)
}
)
fits.kmeans[1]
fits.kmeans[2]
fits.kmeans[1,1]
fits.kmeans[2,1]
fits.kmeans[1,2]
fits.kmeans[1,3]
fits.kmeans[1,4]
fits.kmeans[1,5]
hc <- hclust(distance)
distance <- dist(scaled.data)
hc <- hclust(distance)
featurise <- function(Patient.levels, vals)
{
Vectorised.levels = rep(-2, length(Patient.levels))
Vectorised.levels[Patient.levels == 'Weak'] = vals[2]
Vectorised.levels[Patient.levels == 'Moderate'] = vals[3]
Vectorised.levels[Patient.levels == 'Strong'] = vals[4]
Vectorised.levels[Patient.levels == 'Negative'] = vals[1]
return(Vectorised.levels)
}
Levels = c()
Levels <- sapply(patient.list, function(x)
{
featurise(x, c(-1, 0, 0.5, 1))
})
names(Levels) <- patient.ids
Featurised.vec = hcc_data
Featurised.vec$Patient.2177 = Levels[,1]
Featurised.vec$Patient.2280 = Levels[,2]
Featurised.vec$Patient.2556 = Levels[,3]
Featurised.vec$Patient.2766 = Levels[,4]
Featurised.vec$Patient.3196 = Levels[,5]
Featurised.vec$Patient.3477 = Levels[,6]
scaled.data = scale(t(Levels), scale=F)
no.of.clusters = c(2,3,4,5)
fits.kmeans = sapply(no.of.clusters, function(x)
{
kmeans(scaled.data, x)
)
}
distance <- dist(scaled.data)
hc <- hclust(distance)
scaled.data = scale(t(Levels), scale=F)
no.of.clusters = c(2,3,4,5)
fits.kmeans = sapply(no.of.clusters, function(x)
{
kmeans(scaled.data, x)
}
)
distance <- dist(scaled.data)
hc <- hclust(distance)
plot(hc)
Featurised.vec.2 = hcc_data
Levels.2 <- sapply(patient.list, function(x)
{
featurise(x, c(-1, 1, 1, 1))
})
Levels.2 <- sapply(patient.list, function(x)
{
featurise(x, c(-1, 1, 1, 1))
})
Featurised.vec$Patient.2177 = Levels2[,1]
Featurised.vec$Patient.2280 = Levels2[,2]
Featurised.vec$Patient.2556 = Levels2[,3]
Featurised.vec$Patient.2766 = Levels2[,4]
Featurised.vec$Patient.3196 = Levels2[,5]
Featurised.vec$Patient.3477 = Levels2[,6]
View(Featurised.vec.2)
View(Featurised.vec.2)
Featurised.vec.2$Patient.2177 = Levels2[,1]
Featurised.vec.2$Patient.2280 = Levels2[,2]
Featurised.vec.2$Patient.2556 = Levels2[,3]
Featurised.vec.2$Patient.2766 = Levels2[,4]
Featurised.vec.2$Patient.3196 = Levels2[,5]
Featurised.vec.2$Patient.3477 = Levels2[,6]
Featurised.vec.2$Patient.2177 = Levels.2[,1]
Featurised.vec.2$Patient.2280 = Levels.2[,2]
Featurised.vec.2$Patient.2556 = Levels.2[,3]
Featurised.vec.2$Patient.2766 = Levels.2[,4]
Featurised.vec.2$Patient.3196 = Levels.2[,5]
Featurised.vec.2$Patient.3477 = Levels.2[,6]
Featurised.vec = hcc_data
Featurised.vec$Patient.2177 = Levels[,1]
Featurised.vec$Patient.2280 = Levels[,2]
Featurised.vec$Patient.2556 = Levels[,3]
Featurised.vec$Patient.2766 = Levels[,4]
Featurised.vec$Patient.3196 = Levels[,5]
Featurised.vec$Patient.3477 = Levels[,6]
scaled.data.2 = scale(t(Levels.2), scale=F)
fits.kmeans.2 = sapply(no.of.clusters, function(x)
{
kmeans(scaled.data, x)
}
)
distance2 <- dist(scaled.data.2)
hc <- hclust(distance)
plot(hc)
distance <- dist(scaled.data)
hc <- hclust(distance)
plot(hc)
fits.kmeans.2[1,]
fits.kmeans.2[1,1]
hcc_data = read.csv('C:/Users/NoorPratap/Dropbox/honours/Extract/hcc_data/msb145122-sup-0006-Dataset3/Dataset 3.csv')
get.featurised.levels <- function(patient.list, values)
{
Levels <- sapply(patient.list, function(x)
{
featurise(x, c(-1, 0, 0.5, 1))
})
names(Levels) <- patient.ids
return(Levels)
}
get.featurised.levels <- function(patient.list, values)
{
Levels = c()
Levels <- sapply(patient.list, function(x)
{
featurise(x, c(-1, 0, 0.5, 1))
})
names(Levels) <- patient.ids
return(Levels)
}
get.featurised.levels <- function(patient.list, values)
{
Levels = c()
Levels <- sapply(patient.list, function(x)
{
featurise(x, values)
})
names(Levels) <- patient.ids
return(Levels)
}
Levels.1 = get.featurised.levels(patient.list, c(-1, 0, 0.5, 1))
Featurised.vec.1 = set.featurised.level(hcc_data, Levels.1)
set.featurised.level <- function(main.data, Levels)
{
Featurised.vec = hcc_data
Featurised.vec$Patient.2177 = Levels[,1]
Featurised.vec$Patient.2280 = Levels[,2]
Featurised.vec$Patient.2556 = Levels[,3]
Featurised.vec$Patient.2766 = Levels[,4]
Featurised.vec$Patient.3196 = Levels[,5]
Featurised.vec$Patient.3477 = Levels[,6]
return(Featurised.vec)
}
Featurised.vec.1 = set.featurised.level(hcc_data, Levels.1)
View(Featurised.vec.1)
View(Featurised.vec.1)
remove(Featurised.vec)
Levels.2 <- get.featurised.levels(patient.list, c(-1, 1, 1, 1))
Featurised.vec.2 = set.featurised.level(hcc_data, Levels.2)
get.kmeans <- function(Levels)
{
scaled.data = scale(t(Levels), scale=F)
no.of.clusters = c(2,3,4,5)
fits.kmeans = sapply(no.of.clusters, function(x)
{
kmeans(scaled.data, x)
}
)
return(fits.kmeans)
}
fit.kmeans.1 = get.kmeans(Levels.1)
fit.kmeans.1 = get.kmeans(Levels.1)
fit.kmeans.2 = get.kmeans(Levels.2)
get.hcl <- function(Levels)
{
scaled.data = scale(t(Levels), scale=F)
distance <- dist(scaled.data)
hc <- hclust(distance)
plot(hc)
}
fit.kmeans.1[1,1]
fit.kmeans.1[1,2]
fit.kmeans.1[1,3]
get.hcl(Levels.1)
get.hcl(Levels.2)
hcc.data.complete = read.csv('C:/Users/NoorPratap/Dropbox/honours/Extract/
hcc_data/msb145122-sup-0006-Dataset5/Dataset 5.csv')
hcc.data.complete = read.csv('C:/Users/NoorPratap/Dropbox/honours/Extract/hcc_data/msb145122-sup-0008-Dataset5/Dataset 5.csv')
ans[1,1]
ans[1,2]
get.hcl(Levels.1)
get.hcl(Levels.2)
fit.kmeans.1[1,1]
fit.kmeans.1[1,2]
length(ans[1,6])
ans[1,6]
ans[2,4]
ans[1,4]
ans[6,4]
ans[2,1]
ans[3,1]
ans[2,4]
class(ans[2,4])
match(unlist(ans[2,4]), unlist(ans[1,6]))
Levels.3 = get.featurised.levels(patient.list, c(-1, 1, 1, 1))
Featurised.vec.3 = set.featurised.level(hcc_data, Levels.2)
fit.kmeans.3 = get.kmeans(Levels.3)
get.hcl(Levels.3)
get.hcl(Levels.3)
fit.kmeans.3[1,6]
fit.kmeans.3[1,1]
